name: BE - CD

on:
  push:
    branches: [main]
    paths:
      [
        "src/**",
        "build.gradle",
      ]

permissions:
  contents: read

jobs:
  build_docker_push:
    name: build and push
    runs-on: ubuntu-20.04

    steps:
      - name: setup repo
        uses: actions/checkout@v3

      - name: setup java 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: Insert Database Information
        run: |
          sed -i "s|\${DATASOURCE_URL}|$DATASOURCE_URL|g" ./src/main/resources/application.yml
          sed -i "s|\${DATASOURCE_USERNAME}|$DATASOURCE_USERNAME|g" ./src/main/resources/application.yml
          sed -i "s|\${DATASOURCE_PASSWORD}|$DATASOURCE_PASSWORD|g" ./src/main/resources/application.yml
        env:
          DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
          DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
          DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}

      - name: Insert OAuth Information
        run: |
          sed -i "s|\${JWT_ISSUER}|$JWT_ISSUER|g" ./src/main/resources/oauth.yml
          sed -i "s|\${JWT_SECRET_KEY}|$JWT_SECRET_KEY|g" ./src/main/resources/oauth.yml
          sed -i "s|\${KAKAO_CLIENT_ID}|KAKAO_CLIENT_ID|g" ./src/main/resources/oauth.yml
          sed -i "s|\${KAKAO_CLIENT_SECRET}|KAKAO_CLIENT_SECRET|g" ./src/main/resources/oauth.yml
          sed -i "s|\${KAKAO_REDIRECT_URI}|KAKAO_REDIRECT_URI|g" ./src/main/resources/oauth.yml
        env:
          JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

      - name: use gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: grant execute permission for gradlew
        run: chmod +x gradlew

      - name: build with gradle
        run: ./gradlew build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to NCP Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.NCP_CONTAINER_REGISTRY }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}
      - name: build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.NCP_CONTAINER_REGISTRY }}/qna-diary:latest
          cache-from: type=registry,ref=${{ secrets.NCP_CONTAINER_REGISTRY }}/qna-diary:latest
          cache-to: type=inline

  pull_from_registry:
    name: Connect server ssh and pull from container registry
    needs: build_docker_push
    runs-on: ubuntu-latest
    steps:
      - name: connect ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_SERVER_IP }}
          username: ${{ secrets.NCP_SERVER_USERNAME }}
          password: ${{ secrets.NCP_SERVER_PASSWORD }}
          port: ${{ secrets.NCP_SERVER_PORT }}
          script: |
            docker stop $(docker ps -a -q)
            docker rm $(docker ps -a -q)
            docker pull ${{ secrets.NCP_CONTAINER_REGISTRY }}/qna-diary:latest
            docker run -d -p 80:8080 ${{ secrets.NCP_CONTAINER_REGISTRY }}/qna-diary
            docker image prune -f
